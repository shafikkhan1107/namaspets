document.addEventListener(
  "DOMContentLoaded",
  function () {
    AOS.init();
    [].slice
      .call(document.querySelectorAll("[data-bss-hover-animate]"))
      .forEach(function (t) {
        t.addEventListener("mouseenter", function (t) {
          t.target.classList.add("animated", t.target.dataset.bssHoverAnimate);
        }),
          t.addEventListener("mouseleave", function (t) {
            t.target.classList.remove(
              "animated",
              t.target.dataset.bssHoverAnimate
            );
          });
      });
  },
  !1
),
  $(document).ready(function () {
    $("#owl-demo").owlCarousel({
      autoPlay: 3e3,
      items: 4,
      pagination: !1,
      navigation: !0,
      navigationText: ["prev", "next"],
      itemsDesktop: [1199, 3],
      itemsDesktopSmall: [979, 3],
    });
  }),
  $(window).scroll(function () {
    $(window).scrollTop() >= 330
      ? $(".header-bottom").addClass("fixed")
      : $(".header-bottom").removeClass("fixed");
  }),
  "function" != typeof Object.create &&
    (Object.create = function (t) {
      function i() {}
      return (i.prototype = t), new i();
    }),
  (function (t, i, e, s) {
    var o = {
      init: function (i, e) {
        this.options = this.userOptions = t.extend(
          {},
          t.fn.owlCarousel.options,
          i
        );
        var s = t(e);
        (this.$elem = s), this.loadContent(), console.log(this.options);
      },
      loadContent: function () {
        var i = this;
        if (
          ("function" == typeof i.options.beforeInit &&
            i.options.beforeInit.apply(this, [i.$elem]),
          "string" == typeof i.options.jsonPath)
        ) {
          var e = i.options.jsonPath;
          t.getJSON(e, function (t) {
            if ("function" == typeof i.options.jsonSuccess)
              i.options.jsonSuccess.apply(this, [t]);
            else {
              var e = "";
              for (var s in t.owl) e += t.owl[s].item;
              i.$elem.html(e);
            }
            i.logIn();
          });
        } else i.logIn();
      },
      logIn: function () {
        this.baseClass(),
          this.$elem.css({ opacity: 0 }),
          this.eventTypes(),
          this.checkBrowser(),
          (this.wrapperWidth = 0),
          (this.currentItem = 0),
          (this.$userItems = this.$elem.children()),
          (this.itemsAmount = this.$userItems.length),
          this.wrapItems(),
          (this.owlItems = this.$elem.find(".owl-item")),
          (this.$owlItems = t(this.owlItems)),
          (this.owlWrapper = this.$elem.find(".owl-wrapper")),
          (this.orignalItems = this.options.items),
          (this.playDirection = "next"),
          (this.prevItem = 0),
          this.checkVisible,
          this.customEvents(),
          this.onStartup();
      },
      onStartup: function () {
        var t = this;
        t.updateItems(),
          t.calculateAll(),
          t.buildControls(),
          t.updateControls(),
          t.response(),
          t.moveEvents(),
          t.stopOnHover(),
          t.owlStatus(),
          !1 !== t.options.transitionStyle &&
            t.transitionTypes(t.options.transitionStyle),
          !0 === t.options.autoPlay && (t.options.autoPlay = 5e3),
          t.play(),
          t.$elem.find(".owl-wrapper").css("display", "block"),
          t.$elem.is(":visible")
            ? setTimeout(function () {
                t.$elem.animate({ opacity: 1 }, 200);
              }, 10)
            : t.watchVisibility(),
          (t.onstartup = !1),
          t.eachMoveUpdate(),
          "function" == typeof t.options.afterInit &&
            t.options.afterInit.apply(this, [t.$elem]);
      },
      eachMoveUpdate: function () {
        !0 === this.options.lazyLoad && this.lazyLoad(),
          !0 === this.options.autoHeight && this.autoHeight(),
          !0 === this.options.addClassActive && this.addClassActive(),
          "function" == typeof this.options.afterAction &&
            this.options.afterAction.apply(this, [this.$elem]);
      },
      updateVars: function () {
        this.watchVisibility(),
          this.updateItems(),
          this.calculateAll(),
          this.updatePosition(),
          this.updateControls(),
          this.eachMoveUpdate();
      },
      reload: function (t) {
        var i = this;
        setTimeout(function () {
          i.updateVars();
        }, 0);
      },
      watchVisibility: function () {
        var t = this;
        if (!1 !== t.$elem.is(":visible")) return !1;
        t.$elem.css({ opacity: 0 }),
          clearInterval(t.autoPlayInterval),
          clearInterval(t.checkVisible),
          (t.checkVisible = setInterval(function () {
            t.$elem.is(":visible") &&
              (t.reload(),
              t.$elem.animate({ opacity: 1 }, 200),
              clearInterval(t.checkVisible));
          }, 500));
      },
      wrapItems: function () {
        this.$userItems
          .wrapAll('<div class="owl-wrapper">')
          .wrap('<div class="owl-item"></div>'),
          this.$elem
            .find(".owl-wrapper")
            .wrap('<div class="owl-wrapper-outer">'),
          (this.wrapperOuter = this.$elem.find(".owl-wrapper-outer")),
          this.$elem.css("display", "block");
      },
      baseClass: function () {
        var t = this.$elem.hasClass(this.options.baseClass),
          i = this.$elem.hasClass(this.options.theme);
        t || this.$elem.addClass(this.options.baseClass),
          i || this.$elem.addClass(this.options.theme);
      },
      updateItems: function () {
        if (!1 === this.options.responsive) return !1;
        if (!0 === this.options.singleItem)
          return (
            (this.options.items = this.orignalItems = 1),
            (this.options.itemsDesktop = !1),
            (this.options.itemsDesktopSmall = !1),
            (this.options.itemsTablet = !1),
            (this.options.itemsTabletSmall = !1),
            (this.options.itemsMobile = !1),
            !1
          );
        var i = t(this.options.responsiveBaseWidth).width();
        i > (this.options.itemsDesktop[0] || this.orignalItems) &&
          (this.options.items = this.orignalItems),
          i <= this.options.itemsDesktop[0] &&
            !1 !== this.options.itemsDesktop &&
            (this.options.items = this.options.itemsDesktop[1]),
          i <= this.options.itemsDesktopSmall[0] &&
            !1 !== this.options.itemsDesktopSmall &&
            (this.options.items = this.options.itemsDesktopSmall[1]),
          i <= this.options.itemsTablet[0] &&
            !1 !== this.options.itemsTablet &&
            (this.options.items = this.options.itemsTablet[1]),
          i <= this.options.itemsTabletSmall[0] &&
            !1 !== this.options.itemsTabletSmall &&
            (this.options.items = this.options.itemsTabletSmall[1]),
          i <= this.options.itemsMobile[0] &&
            !1 !== this.options.itemsMobile &&
            (this.options.items = this.options.itemsMobile[1]),
          this.options.items > this.itemsAmount &&
            (this.options.items = this.itemsAmount);
      },
      response: function () {
        var e,
          s = this;
        if (!0 !== s.options.responsive) return !1;
        var o = t(i).width();
        t(i).resize(function () {
          t(i).width() !== o &&
            (!1 !== s.options.autoPlay && clearInterval(s.autoPlayInterval),
            clearTimeout(e),
            (e = setTimeout(function () {
              (o = t(i).width()), s.updateVars();
            }, s.options.responsiveRefreshRate)));
        });
      },
      updatePosition: function () {
        !0 === this.browser.support3d
          ? this.positionsInArray[this.currentItem] > this.maximumPixels
            ? this.transition3d(this.positionsInArray[this.currentItem])
            : (this.transition3d(0), (this.currentItem = 0))
          : this.positionsInArray[this.currentItem] > this.maximumPixels
          ? this.css2slide(this.positionsInArray[this.currentItem])
          : (this.css2slide(0), (this.currentItem = 0)),
          !1 !== this.options.autoPlay && this.checkAp();
      },
      appendItemsSizes: function () {
        var i = this,
          e = 0,
          s = i.itemsAmount - i.options.items;
        i.owlItems.each(function (o) {
          var n = t(this);
          n.css({ width: i.itemWidth }).data("owl-item", Number(o)),
            (o % i.options.items != 0 && o !== s) || o > s || (e += 1),
            n
              .data("owl-roundPages", e)
              .data("owl-originalStyles", n.attr("style"));
        });
      },
      appendWrapperSizes: function () {
        var t = this.owlItems.length * this.itemWidth;
        this.owlWrapper.css({ width: 2 * t, left: 0 }), this.appendItemsSizes();
      },
      calculateAll: function () {
        this.calculateWidth(),
          this.appendWrapperSizes(),
          this.loops(),
          this.max();
      },
      calculateWidth: function () {
        this.itemWidth = Math.round(this.$elem.width() / this.options.items);
      },
      max: function () {
        this.maximumItem = this.itemsAmount - this.options.items;
        var t =
          this.itemsAmount * this.itemWidth -
          this.options.items * this.itemWidth;
        return (t *= -1), (this.maximumPixels = t), t;
      },
      min: function () {
        return 0;
      },
      loops: function () {
        this.positionsInArray = [0];
        for (var t = 0, i = 0; i < this.itemsAmount; i++)
          (t += this.itemWidth), this.positionsInArray.push(-t);
      },
      buildControls: function () {
        (!0 !== this.options.navigation && !0 !== this.options.pagination) ||
          (this.owlControls = t('<div class="owl-controls"/>')
            .toggleClass("clickable", !this.browser.isTouch)
            .appendTo(this.$elem)),
          !0 === this.options.pagination && this.buildPagination(),
          !0 === this.options.navigation && this.buildButtons();
      },
      buildButtons: function () {
        var i = this,
          e = t('<div class="owl-buttons"/>');
        i.owlControls.append(e),
          (i.buttonPrev = t("<div/>", {
            class: "owl-prev",
            html: i.options.navigationText[0] || "",
          })),
          (i.buttonNext = t("<div/>", {
            class: "owl-next",
            html: i.options.navigationText[1] || "",
          })),
          e.append(i.buttonPrev).append(i.buttonNext),
          e.on(
            "touchend.owlControls mouseup.owlControls",
            'div[class^="owl"]',
            function (e) {
              e.preventDefault(),
                t(this).hasClass("owl-next") ? i.next() : i.prev();
            }
          );
      },
      buildPagination: function () {
        var i = this;
        (i.paginationWrapper = t('<div class="owl-pagination"/>')),
          i.owlControls.append(i.paginationWrapper),
          i.paginationWrapper.on(
            "touchend.owlControls mouseup.owlControls",
            ".owl-page",
            function (e) {
              e.preventDefault(),
                Number(t(this).data("owl-page")) !== i.currentItem &&
                  i.goTo(Number(t(this).data("owl-page")), !0);
            }
          );
      },
      updatePagination: function () {
        if (!1 === this.options.pagination) return !1;
        this.paginationWrapper.html("");
        for (
          var i = 0,
            e = this.itemsAmount - (this.itemsAmount % this.options.items),
            s = 0;
          s < this.itemsAmount;
          s++
        )
          if (s % this.options.items == 0) {
            if (((i += 1), e === s))
              var o = this.itemsAmount - this.options.items;
            var n = t("<div/>", { class: "owl-page" }),
              a = t("<span></span>", {
                text: !0 === this.options.paginationNumbers ? i : "",
                class:
                  !0 === this.options.paginationNumbers ? "owl-numbers" : "",
              });
            n.append(a),
              n.data("owl-page", e === s ? o : s),
              n.data("owl-roundPages", i),
              this.paginationWrapper.append(n);
          }
        this.checkPagination();
      },
      checkPagination: function () {
        var i = this;
        if (!1 === i.options.pagination) return !1;
        i.paginationWrapper.find(".owl-page").each(function (e, s) {
          t(this).data("owl-roundPages") ===
            t(i.owlItems[i.currentItem]).data("owl-roundPages") &&
            (i.paginationWrapper.find(".owl-page").removeClass("active"),
            t(this).addClass("active"));
        });
      },
      checkNavigation: function () {
        if (!1 === this.options.navigation) return !1;
        !1 === this.options.rewindNav &&
          (0 === this.currentItem && 0 === this.maximumItem
            ? (this.buttonPrev.addClass("disabled"),
              this.buttonNext.addClass("disabled"))
            : 0 === this.currentItem && 0 !== this.maximumItem
            ? (this.buttonPrev.addClass("disabled"),
              this.buttonNext.removeClass("disabled"))
            : this.currentItem === this.maximumItem
            ? (this.buttonPrev.removeClass("disabled"),
              this.buttonNext.addClass("disabled"))
            : 0 !== this.currentItem &&
              this.currentItem !== this.maximumItem &&
              (this.buttonPrev.removeClass("disabled"),
              this.buttonNext.removeClass("disabled")));
      },
      updateControls: function () {
        this.updatePagination(),
          this.checkNavigation(),
          this.owlControls &&
            (this.options.items === this.itemsAmount
              ? this.owlControls.hide()
              : this.owlControls.show());
      },
      destroyControls: function () {
        this.owlControls && this.owlControls.remove();
      },
      next: function (t) {
        if (this.isTransition) return !1;
        if (
          ((this.storePrevItem = this.currentItem),
          (this.currentItem +=
            !0 === this.options.scrollPerPage ? this.options.items : 1),
          this.currentItem >
            this.maximumItem +
              (1 == this.options.scrollPerPage ? this.options.items - 1 : 0))
        ) {
          if (!0 !== this.options.rewindNav)
            return (this.currentItem = this.maximumItem), !1;
          (this.currentItem = 0), (t = "rewind");
        }
        this.goTo(this.currentItem, t);
      },
      prev: function (t) {
        if (this.isTransition) return !1;
        if (
          ((this.storePrevItem = this.currentItem),
          !0 === this.options.scrollPerPage &&
          this.currentItem > 0 &&
          this.currentItem < this.options.items
            ? (this.currentItem = 0)
            : (this.currentItem -=
                !0 === this.options.scrollPerPage ? this.options.items : 1),
          this.currentItem < 0)
        ) {
          if (!0 !== this.options.rewindNav) return (this.currentItem = 0), !1;
          (this.currentItem = this.maximumItem), (t = "rewind");
        }
        this.goTo(this.currentItem, t);
      },
      goTo: function (t, i, e) {
        var s = this;
        if (s.isTransition) return !1;
        if (
          (s.getPrevItem(),
          "function" == typeof s.options.beforeMove &&
            s.options.beforeMove.apply(this, [s.$elem]),
          t >= s.maximumItem ? (t = s.maximumItem) : t <= 0 && (t = 0),
          (s.currentItem = s.owl.currentItem = t),
          !1 !== s.options.transitionStyle &&
            "drag" !== e &&
            1 === s.options.items &&
            !0 === s.browser.support3d)
        )
          return (
            s.swapSpeed(0),
            !0 === s.browser.support3d
              ? s.transition3d(s.positionsInArray[t])
              : s.css2slide(s.positionsInArray[t], 1),
            s.singleItemTransition(),
            s.afterGo(),
            !1
          );
        var o = s.positionsInArray[t];
        !0 === s.browser.support3d
          ? ((s.isCss3Finish = !1),
            !0 === i
              ? (s.swapSpeed("paginationSpeed"),
                setTimeout(function () {
                  s.isCss3Finish = !0;
                }, s.options.paginationSpeed))
              : "rewind" === i
              ? (s.swapSpeed(s.options.rewindSpeed),
                setTimeout(function () {
                  s.isCss3Finish = !0;
                }, s.options.rewindSpeed))
              : (s.swapSpeed("slideSpeed"),
                setTimeout(function () {
                  s.isCss3Finish = !0;
                }, s.options.slideSpeed)),
            s.transition3d(o))
          : !0 === i
          ? s.css2slide(o, s.options.paginationSpeed)
          : "rewind" === i
          ? s.css2slide(o, s.options.rewindSpeed)
          : s.css2slide(o, s.options.slideSpeed),
          s.afterGo();
      },
      getPrevItem: function () {
        (this.prevItem = this.owl.prevItem =
          void 0 === this.storePrevItem
            ? this.currentItem
            : this.storePrevItem),
          (this.storePrevItem = void 0);
      },
      jumpTo: function (t) {
        this.getPrevItem(),
          "function" == typeof this.options.beforeMove &&
            this.options.beforeMove.apply(this, [this.$elem]),
          t >= this.maximumItem ? (t = this.maximumItem) : t <= 0 && (t = 0),
          this.swapSpeed(0),
          !0 === this.browser.support3d
            ? this.transition3d(this.positionsInArray[t])
            : this.css2slide(this.positionsInArray[t], 1),
          (this.currentItem = this.owl.currentItem = t),
          this.afterGo();
      },
      afterGo: function () {
        this.checkPagination(),
          this.checkNavigation(),
          this.eachMoveUpdate(),
          "function" == typeof this.options.afterMove &&
            this.options.afterMove.apply(this, [this.$elem]),
          !1 !== this.options.autoPlay && this.checkAp();
      },
      stop: function () {
        (this.apStatus = "stop"), clearInterval(this.autoPlayInterval);
      },
      checkAp: function () {
        "stop" !== this.apStatus && this.play();
      },
      play: function () {
        var t = this;
        if (((t.apStatus = "play"), !1 === t.options.autoPlay)) return !1;
        clearInterval(t.autoPlayInterval),
          (t.autoPlayInterval = setInterval(function () {
            t.next(!0);
          }, t.options.autoPlay));
      },
      swapSpeed: function (t) {
        "slideSpeed" === t
          ? this.owlWrapper.css(this.addCssSpeed(this.options.slideSpeed))
          : "paginationSpeed" === t
          ? this.owlWrapper.css(this.addCssSpeed(this.options.paginationSpeed))
          : "string" != typeof t && this.owlWrapper.css(this.addCssSpeed(t));
      },
      addCssSpeed: function (t) {
        return {
          "-webkit-transition": "all " + t + "ms ease",
          "-moz-transition": "all " + t + "ms ease",
          "-o-transition": "all " + t + "ms ease",
          transition: "all " + t + "ms ease",
        };
      },
      removeTransition: function () {
        return {
          "-webkit-transition": "",
          "-moz-transition": "",
          "-o-transition": "",
          transition: "",
        };
      },
      doTranslate: function (t) {
        return {
          "-webkit-transform": "translate3d(" + t + "px, 0px, 0px)",
          "-moz-transform": "translate3d(" + t + "px, 0px, 0px)",
          "-o-transform": "translate3d(" + t + "px, 0px, 0px)",
          "-ms-transform": "translate3d(" + t + "px, 0px, 0px)",
          transform: "translate3d(" + t + "px, 0px,0px)",
        };
      },
      transition3d: function (t) {
        this.owlWrapper.css(this.doTranslate(t));
      },
      css2move: function (t) {
        this.owlWrapper.css({ left: t });
      },
      css2slide: function (t, i) {
        var e = this;
        (e.isCssFinish = !1),
          e.owlWrapper.stop(!0, !0).animate(
            { left: t },
            {
              duration: i || e.options.slideSpeed,
              complete: function () {
                e.isCssFinish = !0;
              },
            }
          );
      },
      checkBrowser: function () {
        var t = "translate3d(0px, 0px, 0px)",
          s = e.createElement("div");
        s.style.cssText =
          "  -moz-transform:" +
          t +
          "; -ms-transform:" +
          t +
          "; -o-transform:" +
          t +
          "; -webkit-transform:" +
          t +
          "; transform:" +
          t;
        var o = s.style.cssText.match(/translate3d\(0px, 0px, 0px\)/g),
          n = null !== o && 1 === o.length,
          a = "ontouchstart" in i || navigator.msMaxTouchPoints;
        this.browser = { support3d: n, isTouch: a };
      },
      moveEvents: function () {
        (!1 === this.options.mouseDrag && !1 === this.options.touchDrag) ||
          (this.gestures(), this.disabledEvents());
      },
      eventTypes: function () {
        var t = ["s", "e", "x"];
        (this.ev_types = {}),
          !0 === this.options.mouseDrag && !0 === this.options.touchDrag
            ? (t = [
                "touchstart.owl mousedown.owl",
                "touchmove.owl mousemove.owl",
                "touchend.owl touchcancel.owl mouseup.owl",
              ])
            : !1 === this.options.mouseDrag && !0 === this.options.touchDrag
            ? (t = [
                "touchstart.owl",
                "touchmove.owl",
                "touchend.owl touchcancel.owl",
              ])
            : !0 === this.options.mouseDrag &&
              !1 === this.options.touchDrag &&
              (t = ["mousedown.owl", "mousemove.owl", "mouseup.owl"]),
          (this.ev_types.start = t[0]),
          (this.ev_types.move = t[1]),
          (this.ev_types.end = t[2]);
      },
      disabledEvents: function () {
        this.$elem.on("dragstart.owl", "img", function (t) {
          t.preventDefault();
        }),
          this.$elem.bind("mousedown.disableTextSelect", function () {
            return !1;
          });
      },
      gestures: function () {
        var s = this,
          o = {
            offsetX: 0,
            offsetY: 0,
            baseElWidth: 0,
            relativePos: 0,
            position: null,
            minSwipe: null,
            maxSwipe: null,
            sliding: null,
            dargging: null,
            targetElement: null,
          };

        function n(t) {
          return t.touches
            ? { x: t.touches[0].pageX, y: t.touches[0].pageY }
            : void 0 !== t.pageX
            ? { x: t.pageX, y: t.pageY }
            : { x: t.clientX, y: t.clientY };
        }

        function a(i) {
          "on" === i
            ? (t(e).on(s.ev_types.move, r), t(e).on(s.ev_types.end, l))
            : "off" === i &&
              (t(e).off(s.ev_types.move), t(e).off(s.ev_types.end));
        }

        function r(a) {
          a = a.originalEvent || a || i.event;
          (s.newPosX = n(a).x - o.offsetX),
            (s.newPosY = n(a).y - o.offsetY),
            (s.newRelativeX = s.newPosX - o.relativePos),
            "function" == typeof s.options.startDragging &&
              !0 !== o.dragging &&
              0 !== s.newPosX &&
              ((o.dragging = !0), s.options.startDragging.apply(this)),
            (s.newRelativeX > 8 ||
              (s.newRelativeX < -8 && !0 === s.browser.isTouch)) &&
              (a.preventDefault ? a.preventDefault() : (a.returnValue = !1),
              (o.sliding = !0)),
            (s.newPosY > 10 || s.newPosY < -10) &&
              !1 === o.sliding &&
              t(e).off("touchmove.owl");
          (s.newPosX = Math.max(
            Math.min(s.newPosX, s.newRelativeX / 5),
            s.maximumPixels + s.newRelativeX / 5
          )),
            !0 === s.browser.support3d
              ? s.transition3d(s.newPosX)
              : s.css2move(s.newPosX);
        }

        function l(e) {
          if (
            (((e = e.originalEvent || e || i.event).target =
              e.target || e.srcElement),
            (o.dragging = !1),
            !0 !== s.browser.isTouch && s.owlWrapper.removeClass("grabbing"),
            0 !== s.newPosX)
          ) {
            var n = s.getNewPosition();
            if (
              (s.goTo(n, !1, "drag"),
              o.targetElement === e.target && !0 !== s.browser.isTouch)
            ) {
              t(e.target).on("click.disable", function (i) {
                i.stopImmediatePropagation(),
                  i.stopPropagation(),
                  i.preventDefault(),
                  t(e.target).off("click.disable");
              });
              var r = t._data(e.target, "events").click,
                l = r.pop();
              r.splice(0, 0, l);
            }
          }
          a("off");
        }
        (s.isCssFinish = !0),
          s.$elem.on(s.ev_types.start, ".owl-wrapper", function (e) {
            if (((e = e.originalEvent || e || i.event), !1 === s.isCssFinish))
              return !1;
            if (!1 === s.isCss3Finish) return !1;
            !1 !== s.options.autoPlay && clearInterval(s.autoPlayInterval),
              !0 === s.browser.isTouch ||
                s.owlWrapper.hasClass("grabbing") ||
                s.owlWrapper.addClass("grabbing"),
              (s.newPosX = 0),
              (s.newRelativeX = 0),
              t(this).css(s.removeTransition());
            var r = t(this).position();
            (o.relativePos = r.left),
              (o.offsetX = n(e).x - r.left),
              (o.offsetY = n(e).y - r.top),
              a("on"),
              (o.sliding = !1),
              (o.targetElement = e.target || e.srcElement);
          });
      },
      clearEvents: function () {
        this.$elem.off(".owl"), t(e).off(".owl");
      },
      getNewPosition: function () {
        var t;
        return (
          (t = this.improveClosest()) > this.maximumItem
            ? ((this.currentItem = this.maximumItem), (t = this.maximumItem))
            : this.newPosX >= 0 && ((t = 0), (this.currentItem = 0)),
          t
        );
      },
      improveClosest: function () {
        var i = this,
          e = i.positionsInArray,
          s = i.newPosX;
        return (
          t.each(e, function (t, o) {
            s - i.itemWidth / 20 > e[t + 1] &&
            s - i.itemWidth / 20 < o &&
            "left" === i.moveDirection()
              ? (o, (i.currentItem = t))
              : s + i.itemWidth / 20 < o &&
                s + i.itemWidth / 20 > e[t + 1] &&
                "right" === i.moveDirection() &&
                (e[t + 1], (i.currentItem = t + 1));
          }),
          i.currentItem
        );
      },
      moveDirection: function () {
        var t;
        return (
          this.newRelativeX < 0
            ? ((t = "right"), (this.playDirection = "next"))
            : ((t = "left"), (this.playDirection = "prev")),
          t
        );
      },
      customEvents: function () {
        var t = this;
        t.$elem.on("owl.next", function () {
          t.next();
        }),
          t.$elem.on("owl.prev", function () {
            t.prev();
          }),
          t.$elem.on("owl.play", function (i, e) {
            (t.options.autoPlay = e), t.play(), (t.hoverStatus = "play");
          }),
          t.$elem.on("owl.stop", function () {
            t.stop(), (t.hoverStatus = "stop");
          }),
          t.$elem.on("owl.goTo", function (i, e) {
            t.goTo(e);
          }),
          t.$elem.on("owl.jumpTo", function (i, e) {
            t.jumpTo(e);
          });
      },
      stopOnHover: function () {
        var t = this;
        !0 === t.options.stopOnHover &&
          !0 !== t.browser.isTouch &&
          !1 !== t.options.autoPlay &&
          (t.$elem.on("mouseover", function () {
            t.stop();
          }),
          t.$elem.on("mouseout", function () {
            "stop" !== t.hoverStatus && t.play();
          }));
      },
      lazyLoad: function () {
        if (!1 === this.options.lazyLoad) return !1;
        for (var i = 0; i < this.itemsAmount; i++) {
          var e = t(this.owlItems[i]),
            s = e.data("owl-item"),
            o = e.find(".lazyOwl");
          if (void 0 === e.data("owl-loaded"))
            o.hide(), e.addClass("loading").data("owl-loaded", "checked");
          else if ("loaded" === e.data("owl-loaded")) continue;
          if (
            (!0 !== this.options.lazyFollow || s >= this.currentItem) &&
            s < this.currentItem + this.options.items
          ) {
            e.data("owl-loaded", "loaded");
            var n = o.data("src");
            n && ((o[0].src = n), o.removeAttr("data-src")),
              o.fadeIn(200),
              e.removeClass("loading");
          }
        }
      },
      autoHeight: function () {
        var i = this,
          e = t(i.owlItems[i.currentItem]).find("img");
        if (void 0 !== e.get(0)) {
          var s = 0;
          !(function t() {
            (s += 1),
              e.get(0).complete
                ? o()
                : s <= 50
                ? setTimeout(t, 200)
                : i.wrapperOuter.css("height", "");
          })();
        } else o();

        function o() {
          var e = t(i.owlItems[i.currentItem]).height();
          i.wrapperOuter.css("height", e + "px"),
            i.wrapperOuter.hasClass("autoHeight") ||
              setTimeout(function () {
                i.wrapperOuter.addClass("autoHeight");
              }, 0);
        }
      },
      addClassActive: function () {
        t(this.owlItems).removeClass("active");
        for (
          var i = this.currentItem;
          i < this.currentItem + this.options.items;
          i++
        )
          t(this.owlItems[i]).addClass("active");
      },
      transitionTypes: function (t) {
        (this.outClass = "owl-" + t + "-out"),
          (this.inClass = "owl-" + t + "-in");
      },
      singleItemTransition: function () {
        var t = this;
        t.isTransition = !0;
        var i = t.outClass,
          e = t.inClass,
          s = t.$owlItems.eq(t.currentItem),
          o = t.$owlItems.eq(t.prevItem),
          n =
            Math.abs(t.positionsInArray[t.currentItem]) +
            t.positionsInArray[t.prevItem],
          a = Math.abs(t.positionsInArray[t.currentItem]) + t.itemWidth / 2;
        t.owlWrapper
          .addClass("owl-origin")
          .css({
            "-webkit-transform-origin": a + "px",
            "-moz-perspective-origin": a + "px",
            "perspective-origin": a + "px",
          });
        var r = "webkitAnimationEnd oAnimationEnd MSAnimationEnd animationend";
        o
          .css(
            (function (t, i) {
              return { position: "relative", left: t + "px" };
            })(n)
          )
          .addClass(i)
          .on(r, function () {
            (t.endPrev = !0), o.off(r), t.clearTransStyle(o, i);
          }),
          s.addClass(e).on(r, function () {
            (t.endCurrent = !0), s.off(r), t.clearTransStyle(s, e);
          });
      },
      clearTransStyle: function (t, i) {
        t.attr("style", t.data("owl-originalStyles")).removeClass(i),
          this.endPrev &&
            this.endCurrent &&
            (this.owlWrapper.removeClass("owl-origin"),
            (this.endPrev = !1),
            (this.endCurrent = !1),
            (this.isTransition = !1));
      },
      owlStatus: function () {
        this.owl = {
          userOptions: this.userOptions,
          baseElement: this.$elem,
          userItems: this.$userItems,
          owlItems: this.$owlItems,
          currentItem: this.currentItem,
          prevItem: this.prevItem,
          isTouch: this.browser.isTouch,
          browser: this.browser,
        };
      },
    };
    (t.fn.owlCarousel = function (i) {
      return this.each(function () {
        var e = Object.create(o);
        e.init(i, this), t.data(this, "owlCarousel", e);
      });
    }),
      (t.fn.owlCarousel.options = {
        items: 5,
        itemsDesktop: [1199, 4],
        itemsDesktopSmall: [979, 3],
        itemsTablet: [768, 2],
        itemsTabletSmall: !1,
        itemsMobile: [479, 1],
        singleItem: !1,
        slideSpeed: 200,
        paginationSpeed: 800,
        rewindSpeed: 1e3,
        autoPlay: !1,
        stopOnHover: !1,
        navigation: !1,
        navigationText: ["prev", "next"],
        rewindNav: !0,
        scrollPerPage: !1,
        pagination: !0,
        paginationNumbers: !1,
        responsive: !0,
        responsiveRefreshRate: 200,
        responsiveBaseWidth: i,
        baseClass: "owl-carousel",
        theme: "owl-theme",
        lazyLoad: !1,
        lazyFollow: !0,
        autoHeight: !1,
        jsonPath: !1,
        jsonSuccess: !1,
        mouseDrag: !0,
        touchDrag: !0,
        addClassActive: !1,
        transitionStyle: !1,
        beforeInit: !1,
        afterInit: !1,
        beforeMove: !1,
        afterMove: !1,
        afterAction: !1,
        startDragging: !1,
      });
  })(jQuery, window, document);
